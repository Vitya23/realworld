"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[288],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=i,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(f,o(o({ref:t},c),{},{components:n})):r.createElement(f,o({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var p=2;p<a;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2061:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return c},default:function(){return d}});var r=n(7462),i=n(3366),a=(n(7294),n(3905)),o=["components"],s={sidebar_position:2},l="Project settings",p={unversionedId:"project-config",id:"project-config",title:"Project settings",description:"Directory structure",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/01-project-config.md",sourceDirName:".",slug:"/project-config",permalink:"/realworld/en/project-config",editUrl:"https://github.com/ditsmod/realworld/edit/main/website/i18n/en/docusaurus-plugin-content-docs/current/01-project-config.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"defaultSidebar",previous:{title:"Introduction",permalink:"/realworld/en/"},next:{title:"Logs",permalink:"/realworld/en/logging"}},c=[{value:"Directory structure",id:"directory-structure",children:[],level:2},{value:"Aliases for imports",id:"aliases-for-imports",children:[],level:2}],u={toc:c};function d(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"project-settings"},"Project settings"),(0,a.kt)("h2",{id:"directory-structure"},"Directory structure"),(0,a.kt)("p",null,"In ",(0,a.kt)("inlineCode",{parentName:"p"},"packages/server")," Ditsmod-application has the following directory structure:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text"},"src\n\u2514\u2500\u2500 app\n    \u251c\u2500\u2500 models\n    \u251c\u2500\u2500 modules\n    \u2502   \u251c\u2500\u2500 routed\n    \u2502   \u2502   \u251c\u2500\u2500 articles\n    \u2502   \u2502   \u2502   \u251c\u2500\u2500 comments\n    \u2502   \u2502   \u2502   \u2514\u2500\u2500 favorite\n    \u2502   \u2502   \u251c\u2500\u2500 profiles\n    \u2502   \u2502   \u251c\u2500\u2500 tags\n    \u2502   \u2502   \u2514\u2500\u2500 users\n    \u2502   \u2514\u2500\u2500 service\n    \u2502       \u251c\u2500\u2500 app-config\n    \u2502       \u251c\u2500\u2500 auth\n    \u2502       \u251c\u2500\u2500 error-handler\n    \u2502       \u251c\u2500\u2500 logger\n    \u2502       \u251c\u2500\u2500 msg\n    \u2502       \u251c\u2500\u2500 mysql\n    \u2502       \u251c\u2500\u2500 openapi-with-params\n    \u2502       \u251c\u2500\u2500 util\n    \u2502       \u2514\u2500\u2500 validation\n    \u2514\u2500\u2500 utils\n")),(0,a.kt)("p",null,"The main feature here is that the modules are divided into two conditional types:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"routed")," - here are the modules that have controllers. Typically, such modules are imported with certain prefixes. For example, the ",(0,a.kt)("inlineCode",{parentName:"li"},"articles")," module is imported with the prefix ",(0,a.kt)("inlineCode",{parentName:"li"},"articles")," and has one controller."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"service")," - here are modules that do not have controllers, but have exported services and extensions.")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"models")," directory contains only those models that do not belong to certain modules. Similar to the ",(0,a.kt)("inlineCode",{parentName:"p"},"utils")," directory."),(0,a.kt)("h2",{id:"aliases-for-imports"},"Aliases for imports"),(0,a.kt)("p",null,"Aliases are widely used in the project to import local files. For example, instead of importing:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { AppConfigService } from '../../service/app-config/config.service';\n")),(0,a.kt)("p",null,"the following is used:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { AppConfigService } from '@service/app-config/config.service';\n")),(0,a.kt)("p",null,"Here ",(0,a.kt)("inlineCode",{parentName:"p"},"@service/*")," is an alias that points to modules located in ",(0,a.kt)("inlineCode",{parentName:"p"},"src/app/modules/service/*"),". The alias data sets by ",(0,a.kt)("inlineCode",{parentName:"p"},"compilerOptions.paths")," in two files:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"./packages/server/tsconfig.json"),";"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"./tsconfig.json"),".")),(0,a.kt)("p",null,"When you run a Ditsmod application in development mode:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"yarn start\n")),(0,a.kt)("p",null,"the file ",(0,a.kt)("inlineCode",{parentName:"p"},"./packages/server/tsconfig.json")," is used, in which aliases point to the directory ",(0,a.kt)("inlineCode",{parentName:"p"},"src"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  // ...\n  "compilerOptions": {\n    // ...\n    "paths": {\n      "@classes/*": ["./src/app/classes/*"],\n      "@service/*": ["./src/app/modules/service/*"],\n      "@routed/*": ["./src/app/modules/routed/*"],\n      "@services-per-app/*": ["./src/app/services-per-app/*"],\n      "@models/*": ["./src/app/models/*"],\n      "@utils/*": ["./src/app/utils/*"],\n      "@shared": ["../shared/src"],\n      "@shared/*": ["../shared/src/*"],\n    }\n  },\n  // ...\n}\n')),(0,a.kt)("p",null,"When you run the Ditsmod application in product mode:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"yarn build\nyarn start-prod\n")),(0,a.kt)("p",null,"the file ",(0,a.kt)("inlineCode",{parentName:"p"},"./tsconfig.json")," is used, in which aliases point to the compiled files in the ",(0,a.kt)("inlineCode",{parentName:"p"},"dist")," directory:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  // ...\n  "compilerOptions": {\n    // ...\n    "paths": {\n      "@classes/*": ["./packages/server/dist/app/classes/*"],\n      "@service/*": ["./packages/server/dist/app/modules/service/*"],\n      "@routed/*": ["./packages/server/dist/app/modules/routed/*"],\n      "@services-per-app/*": ["./packages/server/dist/app/services-per-app/*"],\n      "@models/*": ["./packages/server/dist/app/models/*"],\n      "@utils/*": ["./packages/server/dist/app/utils/*"],\n      "@shared": ["./packages/shared/dist/server"],\n      "@shared/*": ["./packages/shared/dist/server/*"],\n    }\n  },\n  // ...\n}\n')),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/dividab/tsconfig-paths"},"tsconfig-paths")," utility is used for both the development mode and the product mode."),(0,a.kt)("p",null,"In addition, aliases are also listed in ",(0,a.kt)("inlineCode",{parentName:"p"},"packages/server/jest.config.ts")," so that when testing, ",(0,a.kt)("inlineCode",{parentName:"p"},"jest")," to know where to look for files."))}d.isMDXComponent=!0}}]);