"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[943],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return u}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=p(n),u=i,f=m["".concat(s,".").concat(u)]||m[u]||c[u]||r;return n?a.createElement(f,o(o({ref:t},d),{},{components:n})):a.createElement(f,o({ref:t},d))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6690:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return d},default:function(){return m}});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),o=["components"],l={},s="OpenAPI and validation",p={unversionedId:"openapi-and-validation",id:"openapi-and-validation",title:"OpenAPI and validation",description:'Validation of input data in HTTP requests is based on metadata transmitted to @OasRoute() (OAS is "OpenAPI Specification"). Before starting the web server, ValidationExtension analyzes this metadata, and if it is declared in a particular route that the request may come with parameters or the body, ValidationInterceptor is added to this route.',source:"@site/i18n/en/docusaurus-plugin-content-docs/current/03-openapi-and-validation.md",sourceDirName:".",slug:"/openapi-and-validation",permalink:"/realworld/en/openapi-and-validation",editUrl:"https://github.com/ditsmod/realworld/edit/main/website/i18n/en/docusaurus-plugin-content-docs/current/03-openapi-and-validation.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Logs",permalink:"/realworld/en/logging"},next:{title:"Guards",permalink:"/realworld/en/guards"}},d=[{value:"OasOperationObject",id:"oasoperationobject",children:[],level:2}],c={toc:d};function m(e){var t=e.components,n=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"openapi-and-validation"},"OpenAPI and validation"),(0,r.kt)("p",null,"Validation of input data in HTTP requests is based on metadata transmitted to ",(0,r.kt)("inlineCode",{parentName:"p"},"@OasRoute()"),' (OAS is "OpenAPI Specification"). Before starting the web server, ',(0,r.kt)("a",{parentName:"p",href:"https://github.com/ditsmod/realworld/blob/main/packages/server/src/app/modules/service/validation/validation.extension.ts"},"ValidationExtension")," analyzes this metadata, and if it is declared in a particular route that the request may come with parameters or the body, ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ditsmod/realworld/blob/main/packages/server/src/app/modules/service/validation/validation.interceptor.ts"},"ValidationInterceptor")," is added to this route."),(0,r.kt)("p",null,"However, not all metadata accepted in ",(0,r.kt)("inlineCode",{parentName:"p"},"@OasRoute()")," is taken into account for validation. The following is currently being tested:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"number"),": availability of parameter, minimum and maximum value;"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"string"),": availability of parameter, minimum and maximum length;"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"boolean"),": availability of parameter and valid values (0, 1, true, false);"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"object"),": availability of parameter; a recursive pass is made for each property with the check described in all items of this list (",(0,r.kt)("inlineCode",{parentName:"li"},"number"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"string"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"boolean"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"object"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"array"),");"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"array"),": availability of parameter, the minimum and maximum number of items, as well as the check described in all items of this list (",(0,r.kt)("inlineCode",{parentName:"li"},"number"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"string"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"boolean"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"object"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"array"),") for each items.")),(0,r.kt)("h2",{id:"oasoperationobject"},"OasOperationObject"),(0,r.kt)("p",null,"To facilitate the transfer of metadata to ",(0,r.kt)("inlineCode",{parentName:"p"},"@OasRoute()"),", a helper ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ditsmod/realworld/blob/main/packages/server/src/app/utils/oas-helpers.ts"},"OasOperationObject")," has been created. Each method in this class is prefixed with ",(0,r.kt)("inlineCode",{parentName:"p"},"set*")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"get*"),". Each of the methods with the prefix ",(0,r.kt)("inlineCode",{parentName:"p"},"set*")," returns a reference to the instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"OasOperationObject"),", so you can call several methods in a chain:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"@OasRoute('GET', ':slug', [], {\n  ...new OasOperationObject()\n    .setOptionalParams('query', Params, 'tag', 'author', 'limit', 'offset')\n    .setResponse(ArticleItem, 'Description for response content.')\n    .setUnauthorizedResponse()\n    .getNotFoundResponse('The article not found.'),\n})\nasync getArticle() {\n  // ...\n}\n")),(0,r.kt)("p",null,"As you can see, methods with the prefix ",(0,r.kt)("inlineCode",{parentName:"p"},"set*")," are called three times and at the very end - once with the prefix ",(0,r.kt)("inlineCode",{parentName:"p"},"get*"),'. This is an important point: "Each use of the ',(0,r.kt)("inlineCode",{parentName:"p"},"OasOperationObject")," instance must end with a method call with the prefix ",(0,r.kt)("inlineCode",{parentName:"p"},"get*"),'".'),(0,r.kt)("p",null,"Note that ",(0,r.kt)("inlineCode",{parentName:"p"},"Params")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"ArticleItem")," here are the classes that act here as data models from which the ",(0,r.kt)("inlineCode",{parentName:"p"},"OasOperationObject")," helper reads metadata. To pin metadata for each model, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"@Column()")," decorator:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { Column } from '@ditsmod/openapi';\n\nexport class ArticleItem {\n  @Column({}, Article)\n  article: Article;\n}\n")))}m.isMDXComponent=!0}}]);